(module 
 (("hooves/operator-functions" :all)
  ("hooves/lisp-idioms" (:with-prefix idioms- :all))
  ("rosy/drawing" :all)
  ("rosy/utils" :all)
  ((js "gamvas/gamvas-module" gamvas)))

 (define Wall-Focus-State 
   (gamvas.ActorState.extend 
	({} 
	 init 
	 (lambda ()
	   (console.log "Wall-Focus-State initialized."))
	 enter
	 (lambda ()
	   (console.log "Wall-Focus-State entered."))
	 leave
	 (lambda ()
	   (console.log "Wall-Focus-State left."))
	 do-collide (lambda (a b)
				  (console.log "In do collide.")
				  true)
	 on-collision-enter 
 	 (lambda (a)
	   (console.log "Wall hit." a)
	   (comment (match a
					   ((instance Wall wall)
						(set! wall.focused true))
					   (otherwise 
						undefined)))))))
 
 (define (ball-create 
		  [((name x y)
			(recur name x y gamvas.physics.DYNAMIC))
		   ((name x y dynamical-character)
			(this._super name x y)
			(set! this.restitution 0.4)
			(this.add-state (new Wall-Focus-State 'wall-focus) true)
			(set! this.p-1 [: x y])
			(set! this.p-2 [: (+ 1 x) (+ 1 y)])
			(this.set-state 'wall-focus)
			(this.body-circle this.position.x this.position.y 10 dynamical-character))]))

 (define (ball-draw time)
   (this._super time)
   (set! this.p-2 this.p-1)
   (set! this.p-1 [: this.position.x this.position.y])
   (var x this.position.x)
   (var y this.position.y)
   (var st (gamvas.state.get-current-state))
   (var c st.c)
   (with-jitter st.c 10 3 
				(lambda (c)
				  (set! c.fill-style
						(+ "rgba(" 255 "," 
						   (random-int 80) "," 
						   (random-int 80) ",.4)"))
				  (c.begin-path)
				  (c.arc (random 4 (- x 2)) 
						 (random 4 (- y 2)) 
						 (random .1 10) 
						 0 
						 (* 2 Math.PI) 
						 false)
				  (c.fill))))

 (define (stationary?)
   (let ((x this.position.x)
		 (y this.position.y)
		 ([: x-1 y-1] this.p-1)
		 ([: x-2 y-2] this.p-2))
	 (&& (=== x x-1)
		 (=== x-1 x-2)
		 (=== y y-1)
		 (=== y-1 y-2))))

 (define+ Ball 
   (gamvas.Actor.extend 
	({}
	 create ball-create
	 draw ball-draw
	 stationary? stationary?))))
