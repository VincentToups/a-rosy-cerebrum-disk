(module 
 (("hooves/operator-functions" :all)
  ("hooves/lisp-idioms" (:with-prefix idioms- :all))
  ("rosy/drawing" :all)
  ("rosy/utils" :all)
  ("hooves/hooves" :all)
  ((js "gamvas/gamvas-module" gamvas)))

 (define Wall-Focus-State 
   (gamvas.ActorState.extend 
	({} 
	 init 
	 (lambda ()
	   (console.log "Wall-Focus-State initialized."))
	 enter
	 (lambda ()
	   (console.log "Wall-Focus-State entered."))
	 leave
	 (lambda ()
	   (console.log "Wall-Focus-State left."))
	 do-collide (lambda (a b)
				  true)
	 on-collision
	 (lambda (a ni ti c)
	   (console.log "Wall hit."))
	 on-collision-enter 
 	 (lambda (a)
	   (console.log "Wall hit." a)))))

 (define Forceable-State 
   (gamvas.ActorState.extend 
	({} update 
		(lambda (time)
		  (if (defined? this.actor.g-factors)
			  (progn (var gf 1)
					 (for* ((index element) in this.actor.g-factors)
						   (set! gf (* gf element)))
					 (set! this.actor.g-factors undefined)
					 (set! this.actor.body.gravityFactor gf))
			(progn 
			  (set! this.actor.body.gravityFactor 1)))

		  (if (defined? this.actor.d-factors)
			  (progn (var df 0)
					 (for* ((index element) in this.actor.d-factors)
						   (set! df (+ df element)))
					 (set! this.actor.d-factors undefined)
					 (this.actor.setLinearDamping df))
			(progn 
			  (this.actor.setLinearDamping 0)))

		  (when (defined? this.actor.forces)
			(for* ((index force-desc) in this.actor.forces)
				  (this.actor.body.ApplyForce.apply this.actor.body force-desc))
			(set! this.actor.forces undefined))))))
 
 (define (ball-create 
		  [((name x y)
			(recur name x y gamvas.physics.DYNAMIC))
		   ((name x y dynamical-character)
			(this._super name x y)
			(set! this.restitution 0.4)

			(set! this.p-1 [: x y])
			(set! this.p-2 [: (+ 1 x) (+ 1 y)])
			(this.add-state (new Forceable-State :forceable))
			(this.set-state :forceable)			
			(this.body-circle this.position.x this.position.y 10 dynamical-character))]))

 (define (ball-draw time)
   (this._super time)
   (set! this.p-2 this.p-1)
   (set! this.p-1 [: this.position.x this.position.y])
   (var x this.position.x)
   (var y this.position.y)
   (var st (gamvas.state.get-current-state))
   (var c st.c)
   (with-jitter st.c 10 3 
				(lambda (c)
				  (set! c.fill-style
						(+ "rgba(" 255 "," 
						   (random-int 80) "," 
						   (random-int 80) ",.4)"))
				  (c.begin-path)
				  (c.arc (random 4 (- x 2)) 
						 (random 4 (- y 2)) 
						 (random .1 10) 
						 0 
						 (* 2 Math.PI) 
						 false)
				  (c.fill))))

 (define (stationary?)
   (let ((x this.position.x)
		 (y this.position.y)
		 ([: x-1 y-1] this.p-1)
		 ([: x-2 y-2] this.p-2))
	 (&& (=== x x-1)
		 (=== x-1 x-2)
		 (=== y y-1)
		 (=== y-1 y-2))))

 (define+ Ball 
   (gamvas.Actor.extend 
	({}
	 create ball-create
	 draw ball-draw
	 add-force (lambda (f a)
				 (if (undefined? this.forces)
					 (set! this.forces [:]))
				 (this.forces.push [: f a]))
	 cancel-gravity-next-update 
	 (lambda (:- (opt by 0))
	   (if (undefined? this.g-factors)
		   (set! this.g-factors [:]))
	   (this.g-factors.push by))
	 add-damping-next-update 
	 (lambda (:- (opt by 0))
	   (if (undefined? this.d-factors)
		   (set! this.d-factors [:]))
	   (this.d-factors.push by))
	 stationary? stationary?))))
