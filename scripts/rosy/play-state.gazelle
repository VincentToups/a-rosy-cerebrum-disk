(module 
 (("hooves/operator-functions" :all)
  ("hooves/lisp-idioms" (:with-prefix idioms- :all))
  ("hooves/hooves" :all)
  ("rosy/drawing" :all)
  ("rosy/utils" :all)
  ("rosy/wall" :all)
  ("rosy/ball" :all)
  ("rosy/goal" :all)
  ((js "gamvas/gamvas-module" gamvas))
  ((js "gamvas/box-2d-module" b2d)))


 (comment "This comment better appear.")

 (define-macro keyed? (key-sig)
   `(gamvas.key.is-pressed (.. gamvas key ,key-sig)))

 (define (make-init level)
   (lambda ()
	 (set! gamvas.physics.pixelsPerMeter 128)
	 (var w (gamvas.physics.reset-world 0 9.8 false))
	 (var self this)
	 (set! this.sub-state :in-play)
	 (set! this.log-counter 0)
	 (match (level)
			(({} geometry g
				 initial-position [: px py])
			 (for (i :in g)
				  (this.add-actor [g i]))
			 (set! this.ball (new Ball "Player" px py))
			 (this.add-actor this.ball)
			 (this.add-actor (new Goal "Goal" 25 150 this.ball))))
	 (console.log "this.ball is " this.ball)))

 (define (draw-in-play time)
   (if (&& (keyed? PAGE_UP)
		   (< this.camera.zoom-factor 1.5))
	   (this.camera.zoom (* time 0.7)))
   (if (&& (keyed? PAGE_DOWN)
		   (> this.camera.zoom-factor 0.1))
	   (this.camera.zoom (* time -0.7)))

   (if (keyed? UP)
	   (this.camera.move 0 (* time -70)))
   (if (keyed? DOWN)
	   (this.camera.move 0 (* time 70)))
   (if (keyed? LEFT)
	   (this.camera.move (* time -70) 0))
   (if (keyed? RIGHT)
	   (this.camera.move (* time 70) 0))
   (var vec (new gamvas.Vector2D 0 9.8))
   (gamvas.physics.set-gravity vec)
   (comment (this.camera.set-position this.ball.position.x this.ball.position.y))
   (move-towards this.camera this.ball.position time))

 (define (draw time)
   (set! this.log-counter (+ 1 this.log-counter))
   (match this.sub-state
		  (:in-play (this.draw-in-play time))
		  (other-value 
		   (this.draw-in-play time)))
   (comment (gamvas.physics.draw-debug)))

 (define (log 
		  [((arguments (defined modulo))
			(if (%===0 this.log-counter modulo)
				(console.log.apply console arguments)))
		   ((arguments)
			(recur arguments 300))]))

 (define (on-mouse-down btn x y evt)
   (var actors (@ (get-actors)))
   (for (index :in actors)
		(var actor [actors index])
		(.. (actor.get-current-state) (on-mouse-down btn x y evt))))

 (define+ (create-play-state params)
   (gamvas.State.extend 
	({} 
	 init (make-init params)
	 draw draw
	 draw-in-play draw-in-play
	 on-mouse-down on-mouse-down
	 log log))))



