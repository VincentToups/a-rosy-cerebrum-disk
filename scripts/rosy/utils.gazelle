(module 
 (("hooves/operator-functions" :all)
  ("hooves/lisp-idioms" :all)
  ("hooves/hooves" :all)
  ((js "gamvas/gamvas-module" gamvas)))

 (define+ (%===0 n m)
   (=== 0 (% n m)))

 (define+ (drgba :- (options{} (r 100)
							  (dr 0)
							  (g 100)
							  (dg 0)
							  (b 100)
							  (db 0)
							  (a 0)
							  (da 0)))

   (set! (@ r) r)
   (set! (@ g) g)
   (set! (@ b) b)
   (set! (@ a) a)

   (set! (@ dr) dr)
   (set! (@ dg) dg)
   (set! (@ db) db)
   (set! (@ da) da)
   this)

 (define (color-rectify v)
   (Math.round 
	(if (> v 255) 
		255
	  (if (< v 0) 0 v))))

 (define (alpha-rectify a)
   (if (> a 1) 
	   1
	 (if (< a 0) 0 a)))

 (define (color-random c m)
   (var r (- (/ m 2) (random m)))

   (var a (color-rectify (+ c r)))

   a)

 (define (alpha-random c m)
   (var r (- (/ m 2) (random m)))

   (var a (alpha-rectify (+ c r)))

   a)

 

 (set! drgba.prototype.to-string 
	   (lambda ()

		 (+ "rgba(" 
			(color-random (@ r) (@ dr))
			","
			(color-random (@ g) (@ dg))
			","
			(color-random (@ b) (@ db))
			","
			(alpha-random (@ a) (@ da))
			")")))

 (define+ (make-drgba options)
   (new drgba options))

 (define+ (move-towards (and camera
							 ({}- position ({} x cx y cy))) 
						({} x x y y)
						time)
   (var d (new gamvas.Vector2D (- x cx)
			   (- y cy)))
   (var len (d.length))
   (var dir (d.normalized))
   (var move (new gamvas.Vector2D 
				  (* time dir.x (Math.pow (* 0.1 len) 4))
				  (* time dir.y (Math.pow (* 0.1 len) 4))))
   (camera.move move.x move.y))

 (define+ (random 
		   [((magnitude)
			 (* magnitude (Math.random)))
			((magnitude offset)
			 (+ offset (* magnitude (Math.random))))]))


 (define+ (random-normal :- (opt c 0) (opt s 1))
   (var total 0)
   (for ((var i 0) (< i 10) (set! i (+ i 1)))
		(set! total (+ total 
					   (random 2 -1))))
   (set! total (/ total 10))
   (+ c (* total s)))

 (define+ (random-int
		   [((magnitude)
			 (Math.round (* magnitude (Math.random))))
			((magnitude offset)
			 (Math.round (+ offset (* magnitude (Math.random)))))])))
