(module 
 (("hooves/operator-functions" :all)
  ("hooves/lisp-idioms" (:with-prefix idioms- :all))
  ("rosy/drawing" :all)
  ("rosy/utils" :all)
  ((js "gamvas/gamvas-module" gamvas)))

 (define (small-jitter about)
   (+ about (random 1)))


 (define (wall-create name x y w h :- (opt r 0))
   (this._super name x y)
   (set! this.wall-w w)
   (set! this.wall-h h)
   (console.log "Creating a wall at " (JSON.stringify [: x y w h]))
   (this.body-rect this.position.x this.position.y w h gamvas.physics.STATIC)
   (this.set-rotation r)
   (set! this.rotation r)
   (set! this.r r)
   (console.log "wall rotation is " this.rotation))

 (define (wall-draw time)
   (this._super time)
   (var x this.position.x)
   (var y this.position.y)
   (var hw (/ this.wall-w 2))
   (var hh (/ this.wall-h 2))

   (comment   (var tlx (- x hw))
			  (var tly (+ y hh))

			  (var trx (+ x hw))
			  (var try* (+ y hh))

			  (var brx (+ x hw))
			  (var bry (- y hh))

			  (var blx (- x hw))
			  (var bly (- y hh)))

   (var tlx (- hw))
   (var tly (+ hh))

   (var trx (+ hw))
   (var try* (+ hh))

   (var brx (+ hw))
   (var bry (- hh))

   (var blx (- hw))
   (var bly (- hh))

   (var st (gamvas.state.get-current-state))
   (var c st.c)
   (var jit-line-to (function
					 (x y)
					 (c.line-to (small-jitter x)
								(small-jitter y))))
   (var r this.rotation)
   (with-jitter c 10 3 
				(lambda (c)
				  (set! c.fill-style 
						(+ "rgba(" (random-int 20 100) "," 
						   (random-int 20 149) "," 
						   237 ",.4)"))
				  (c.translate x y)
				  (c.rotate r)
				  (c.begin-path)
				  (c.move-to (small-jitter tlx) (small-jitter tly))
				  (jit-line-to trx try*)
				  (jit-line-to brx bry)
				  (jit-line-to blx bly)
				  (c.fill))))

 (define+ Wall 
   (gamvas.Actor.extend ({} create wall-create
							draw wall-draw))))